name: Build, Test and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  build:

    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build o-auth Docker image
        run: |
          docker build -t ${{ env.DOCKER_USERNAME }}/o-auth:latest ./app

      - name: Build o-auth-db Docker image
        run: |
          docker pull mysql:8.0.31
          docker tag mysql:8.0.31 ${{ env.DOCKER_USERNAME }}/o-auth-db:latest

      - name: Push o-auth Docker image
        run: |
          docker push ${{ env.DOCKER_USERNAME }}/o-auth:latest

      - name: Push o-auth-db Docker image
        run: |
          docker push ${{ env.DOCKER_USERNAME }}/o-auth-db:latest

  test:

    runs-on: ubuntu-latest
    needs: build  

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      
      - name: Generate .env file
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "MYSQL_ENGINE=${{ secrets.MYSQL_ENGINE }}" >> .env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "GOOGLE_TOKEN_URL=${{ secrets.GOOGLE_TOKEN_URL }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env
          echo "GOOGLE_GRANT_TYPE=${{ secrets.GOOGLE_GRANT_TYPE }}" >> .env
          echo "GOOGLE_USER_INFO_URL=${{ secrets.GOOGLE_USER_INFO_URL }}" >> .env

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Run migrations inside container
        run: |
          docker exec o-auth python manage.py migrate

      - name: Run tests inside container
        run: |
          docker exec o-auth pytest app/tests/

      - name: Clean up containers
        run: |
          docker-compose -f docker-compose.yml down
